name: Sync Kubeflow Manifests

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at 00:00 UTC
  workflow_dispatch:
    inputs:
      upstream_ref:
        description: 'Kubeflow tag or branch to sync (leave blank to auto-detect latest tag)'
        required: false
        default: 'v1.10.0'

# Add necessary permissions
permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      upstream_ref: ${{ steps.ref.outputs.ref }}
      previous_ref: ${{ steps.prev.outputs.prev }}
    steps:
      - name: Get latest tag if none provided
        id: ref
        run: |
          if [ -z "${{ github.event.inputs.upstream_ref }}" ]; then
            latest=$(git ls-remote --tags https://github.com/kubeflow/manifests.git | grep -o 'refs/tags/.*' | sed 's|refs/tags/||' | sort -V | tail -n1)
            echo "Auto-detected latest tag: $latest"
            echo "ref=$latest" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ github.event.inputs.upstream_ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get previously synced upstream ref
        id: prev
        run: |
          if [[ -f .last-upstream-ref ]]; then
            echo "prev=$(cat .last-upstream-ref)" >> $GITHUB_OUTPUT
          else
            echo "prev=unknown" >> $GITHUB_OUTPUT
          fi

  sync:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: [common, apps, experimental, example]
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    env:
      DEST_BASE: kubernetes/apps/kubeflow-system/platform/manifests
    steps:
      - uses: actions/checkout@v4

      - name: Clone upstream
        run: |
          git clone --depth=1 --branch "${{ needs.setup.outputs.upstream_ref }}" https://github.com/kubeflow/manifests.git upstream
          if [ $? -ne 0 ]; then
            echo "Failed to clone upstream repository"
            exit 1
          fi

      - name: Check and sync folder
        id: check
        run: |
          set -e # Exit immediately if a command fails

          src="upstream/${{ matrix.folder }}"
          dest="${DEST_BASE}/${{ matrix.folder }}"

          # Validate source directory exists
          if [ ! -d "$src" ]; then
            echo "Source directory $src not found!"
            exit 1
          fi

          # Create temporary directory for processing
          mkdir -p "tmp-sync/${{ matrix.folder }}"

          # Copy files to temp directory first
          cp -r "$src"/* "tmp-sync/${{ matrix.folder }}/"

          # Remove all OWNERS files
          find "tmp-sync/${{ matrix.folder }}" -name "OWNERS" -type f -delete

          # Ensure destination folder exists
          mkdir -p "$dest"

          # Check for differences
          if diff -qr "tmp-sync/${{ matrix.folder }}" "$dest" > /dev/null 2>&1; then
            echo "✅ No changes in ${{ matrix.folder }}"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "🔁 Changes found in ${{ matrix.folder }}"
            # Clean destination without destroying the folder structure
            find "$dest" -mindepth 1 -delete
            # Copy content preserving the folder structure
            cp -r "tmp-sync/${{ matrix.folder }}"/* "$dest/"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload updated folder
        if: steps.check.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: synced-${{ matrix.folder }}
          path: ${{ env.DEST_BASE }}/${{ matrix.folder }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf upstream tmp-sync

  check_changes:
    needs: sync
    runs-on: ubuntu-latest
    outputs:
      any_changes: ${{ steps.check_matrix_outputs.outputs.any_changes }}
    steps:
      - id: check_matrix_outputs
        run: |
          # Find if any matrix job reported changes
          changes="${{ needs.sync.outputs.changed }}"
          # Check if string 'true' appears anywhere in the output
          if [[ "$changes" == *"true"* ]]; then
            echo "any_changes=true" >> $GITHUB_OUTPUT
          else
            echo "any_changes=false" >> $GITHUB_OUTPUT
          fi

  finalize:
    needs: [setup, sync, check_changes]
    runs-on: ubuntu-latest
    if: needs.check_changes.outputs.any_changes == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Download synced folders
        uses: actions/download-artifact@v4
        with:
          pattern: synced-*
          merge-multiple: true
          path: kubernetes/apps/kubeflow-system/platform/manifests

      - name: Save updated upstream ref
        run: echo "${{ needs.setup.outputs.upstream_ref }}" > .last-upstream-ref

      - name: Generate changelog
        id: changelog
        run: |
          set -e
          git clone --depth=100 https://github.com/kubeflow/manifests.git full-upstream
          cd full-upstream

          from="${{ needs.setup.outputs.previous_ref }}"
          to="${{ needs.setup.outputs.upstream_ref }}"

          # Fetch tags to ensure they're available
          git fetch --tags

          # Generate changelog with error handling
          if [[ "$from" == "unknown" ]]; then
            echo "No previous ref known, showing recent commits"
            log=$(git log -n 20 --oneline "$to" 2>/dev/null || echo "Unable to retrieve commit history.")
          else
            log=$(git log --oneline "$from..$to" 2>/dev/null || echo "No changelog available or unable to generate diff.")
          fi

          cd ..
          # Save changelog to env variable for PR description
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$log" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Cleanup upstream repo
        if: always()
        run: rm -rf full-upstream

      - name: Create branch and commit changes
        id: commit
        run: |
          git config user.email "1109230+bot-goyangi[bot]@users.noreply.github.com"
          git config user.name "bot-goyangi[bot]"
          BRANCH="kubeflow-sync-${{ needs.setup.outputs.upstream_ref }}-$(date +%s)"
          git checkout -b "$BRANCH"
          git add kubernetes/apps/kubeflow-system/platform/manifests .last-upstream-ref
          git commit --signoff -m "chore: sync Kubeflow manifests from ${{ needs.setup.outputs.upstream_ref }}"
          git push origin "$BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Get diff summary
        id: diff
        run: |
          summary=$(git diff --stat HEAD~1 HEAD)
          echo "DIFF<<EOF" >> $GITHUB_ENV
          echo "$summary" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          sign-commits: true
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: ${{ env.BRANCH }}
          labels: area/kubeflow
          title: "Sync Kubeflow manifests from ${{ needs.setup.outputs.upstream_ref }}"
          reviewers: solanyn
          body: |
            ## 📦 Synced Kubeflow Manifests

            Folders synced from upstream ref: `${{ needs.setup.outputs.upstream_ref }}`
            to `kubernetes/apps/kubeflow-system/platform/manifests`.

            🔄 **From:** `${{ needs.setup.outputs.previous_ref }}`
            🚀 **To:** `${{ needs.setup.outputs.upstream_ref }}`

            ## 📜 Changelog
            ```
            ${{ env.CHANGELOG }}
            ```

            ## 📊 Diff Summary
            ```
            ${{ env.DIFF }}
            ```