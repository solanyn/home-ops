# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Sync Kubeflow Manifests

on:
  schedule:
    - cron: "0 0 * * *" # Daily at 00:00 UTC
  workflow_dispatch:
    inputs:
      upstream_ref:
        description: "Kubeflow tag or branch to sync (leave blank for latest tag)"
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      upstream_ref: ${{ steps.resolve.outputs.ref }}
      previous_ref: ${{ steps.prev.outputs.prev }}
    steps:
      - name: Read previously synced upstream ref
        id: prev
        run: |
          file_path="third_party/kubeflow/manifests/.last-upstream-ref"
          if [[ -f "$file_path" ]]; then
            prev=$(cat "$file_path")
            echo "📜 Found previous ref: $prev"
          else
            prev="unknown"
            echo "⚠️ No previous ref found"
          fi
          echo "prev=$prev" >> $GITHUB_OUTPUT

      - name: Get latest tag or use provided input (with caching)
        id: resolve
        run: |
          set -euo pipefail

          input_ref="${{ github.event.inputs.upstream_ref || 'latest' }}"

          # Cache git refs to avoid hitting remote multiple times
          echo "🔄 Fetching remote refs from kubeflow/manifests…"
          git_refs=$(git ls-remote https://github.com/kubeflow/manifests.git)

          if [[ "$input_ref" == "latest" ]]; then
            echo "No tag provided. Detecting latest stable release tag…"
            latest_tag=$(echo "$git_refs" \
              | grep 'refs/tags/v[0-9]*\.[0-9]*\.[0-9]*$' \
              | sed 's|.*refs/tags/||' \
              | sort -V \
              | tail -n1)

            if [[ -z "$latest_tag" ]]; then
              echo "❌ Failed to detect latest tag"
              exit 1
            fi

            echo "✅ Detected latest tag: $latest_tag"
            echo "ref=$latest_tag" >> $GITHUB_OUTPUT
          else
            echo "🔍 Validating user-provided ref: $input_ref"

            if echo "$git_refs" | grep -q "refs/tags/${input_ref}$"; then
              echo "✅ Found tag: $input_ref"
            elif echo "$git_refs" | grep -q "refs/heads/${input_ref}$"; then
              echo "✅ Found branch: $input_ref"
            else
              echo "❌ Ref '$input_ref' does not exist as a tag or branch in kubeflow/manifests"
              exit 1
            fi

            echo "ref=$input_ref" >> $GITHUB_OUTPUT
          fi

  sync:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    env:
      DEST_BASE: third_party/kubeflow/manifests/
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Clone upstream kubeflow/manifests
        uses: GuillaumeFalourd/clone-github-repo-action@main
        with:
          owner: kubeflow
          repository: manifests
          branch: "${{ needs.setup.outputs.upstream_ref }}"
          depth: 1

      - name: Sync selected folders
        id: check
        run: |
          set -e
          folders=(common apps experimental example)
          changed=false

          for folder in "${folders[@]}"; do
            src="manifests/${folder}"
            dest="${DEST_BASE}/${folder}"

            if [ ! -d "$src" ]; then
              echo "Source folder '$src' not found. Skipping."
              continue
            fi

            # Remove OWNERS files
            find "$src" -name "OWNERS" -type f -delete

            # Create destination directory if it doesn't exist
            mkdir -p "$dest"

            # Compare and sync if changes
            if ! diff -qr "$src" "$dest" > /dev/null; then
              echo "🔁 Changes found in ${folder}"
              rm -rf "$dest"/*
              cp -r "$src/"* "$dest/"
              changed=true
            else
              echo "✅ No changes in ${folder}"
            fi
          done

          echo "changed=$changed" >> $GITHUB_OUTPUT

      - name: Upload synced folders
        if: steps.check.outputs.changed == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: synced-manifests
          path: ${{ env.DEST_BASE }}

      - name: Cleanup
        if: always()
        run: rm -rf manifests

  finalize:
    needs: [setup, sync]
    runs-on: ubuntu-latest
    if: needs.sync.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main

      - name: Download synced folders
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: synced-manifests
          path: third_party/kubeflow/manifests

      - name: Fetch GitHub Release Notes
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ needs.setup.outputs.upstream_ref }}"

          # Try fetching release notes for the tag
          release=$(gh release view "$tag" --repo kubeflow/manifests --json body -q .body 2>/dev/null || echo "")

          if [[ -n "$release" ]]; then
            echo "Using GitHub release notes"
            echo "RELEASENOTES<<EOF" >> $GITHUB_ENV
            echo "$release" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "No release found, falling back to changelog"
            echo "RELEASENOTES=${{ env.CHANGELOG }}" >> $GITHUB_ENV
          fi

      - name: Save updated upstream ref
        run: echo "${{ needs.setup.outputs.upstream_ref }}" > third_party/kubeflow/manifests/.last-upstream-ref

      - name: Generate changelog
        id: changelog
        run: |
          set -e
          git clone --depth=100 https://github.com/kubeflow/manifests.git full-upstream
          cd full-upstream

          from="${{ needs.setup.outputs.previous_ref }}"
          to="${{ needs.setup.outputs.upstream_ref }}"

          git fetch --tags

          if [[ "$from" == "unknown" ]]; then
            echo "No previous ref known, showing recent commits"
            log=$(git log -n 20 --oneline "$to" 2>/dev/null || echo "Unable to retrieve commit history.")
          else
            log=$(git log --oneline "$from..$to" 2>/dev/null || echo "No changelog available or unable to generate diff.")
          fi

          cd ..
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$log" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Cleanup upstream repo
        if: always()
        run: rm -rf full-upstream

      - name: Generate Token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Create or Update Pull Request
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7
        with:
          token: "${{ steps.app-token.outputs.token }}"
          signoff: true
          sign-commits: true
          committer: bot-goyangi[bot] <1109230+bot-goyangi[bot]@users.noreply.github.com>
          author: bot-goyangi[bot] <1109230+bot-goyangi[bot]@users.noreply.github.com>
          base: main
          branch: kubeflow-sync-${{ needs.setup.outputs.upstream_ref }}
          delete-branch: true
          title: "feat(kubeflow): sync kubeflow/manifests from ${{ needs.setup.outputs.upstream_ref }}"
          reviewers: solanyn
          body: |
            ## 📦 Synced Kubeflow Manifests

            Folders synced from upstream ref: `${{ needs.setup.outputs.upstream_ref }}`
            to `third_party/kubeflow/manifests`.

            🔄 **From:** `${{ needs.setup.outputs.previous_ref }}`
            🚀 **To:** `${{ needs.setup.outputs.upstream_ref }}`

            ## 📝 Release Notes / Changelog
            ```
            ${{ env.RELEASENOTES }}
            ```

            ## 📊 Diff Summary
            ```
            ${{ env.DIFF }}
            ```
