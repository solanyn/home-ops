# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: readarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    controllers:
      readarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          change-ownership:
            image:
              repository: alpine
              tag: 3.21.0@sha256:21dc6063fd678b478f57c0e13f47560d0ea4eeba26dfc947b2a4f81f686b9f45
            command: ["sh", "-c", "cp /secret/config.xml /config/config.xml && chown 568:568 /config/config.xml"]
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.6@sha256:35353a77777ee8f634d0f3945f495b4a40065134b8619e0d18bd49b0ee9c855b
            envFrom: &envFrom
              - secretRef:
                  name: readarr-secret
        containers:
          app:
            image:
              repository: ghcr.io/joryirving/readarr-develop
              tag: 0.4.4.2686@sha256:e43066ec0e300687fc8cabde9385f3ad6975d79c5fe9795797c2ae0bfe0320fa
            env:
              # NOTE: Environment variables only work because onedr0p containers do some cool things to turn ENV variables to config.xml
              READARR__APP__INSTANCENAME: Readarr
              READARR__APP__THEME: dark
              READARR__AUTH__METHOD: External
              READARR__AUTH__REQUIRED: DisabledForLocalAddresses
              READARR__SERVER__PORT: &port 80
              READARR__LOG_LEVEL: info
              READARR__UPDATE__BRANCH: develop
              TZ: Australia/Sydney
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 2Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: {type: RuntimeDefault}
    service:
      app:
        controller: readarr
        ports:
          http:
            port: *port
    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_HOME_DOMAIN}
        className: internal
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_HOME_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: readarr
      # NOTE: While ENV variable config is not available
      config-file:
        type: secret
        name: readarr-secret
        globalMounts:
          - path: /secret/config.xml
            subPath: config.xml
      tmp:
        type: emptyDir
      media:
        type: nfs
        server: nas.internal
        path: /mnt/world/media
        globalMounts:
          - path: /media
