# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'
tasks:
  encrypt-secrets:
    desc: Encrypt secrets with Sops
    cmds:
      - for: {var: SECRET_FILES}
        cmd: |
          if sops filestatus "{{.ITEM}}" | jq --exit-status ".encrypted == false" &>/dev/null; then
              sops --encrypt --in-place "{{.ITEM}}"
          fi
      - for: {var: SECRET_J2_FILES}
        cmd: |
          if ! grep -q -x  "sops:" "{{.ITEM}}"; then
              sops --encrypt --in-place --input-type yaml --output-type yaml "{{.ITEM}}"
          fi
    vars:
      SECRET_FILES:
        sh: find "{{.ROOT_DIR}}" -type f -name "*.sops.yaml"
      SECRET_J2_FILES:
        sh: find "{{.ROOT_DIR}}" -type f -name "*.sops.*.j2"
    preconditions:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - which sops
  decrypt-secrets:
    desc: Decrypt secrets with Sops
    cmds:
      - for: {var: SECRET_FILES}
        cmd: |
          if sops filestatus "{{.ITEM}}" | jq --exit-status ".encrypted == true" &>/dev/null; then
              sops --decrypt --in-place --input-type yaml --output-type yaml "{{.ITEM}}"
          fi
      - for: {var: SECRET_J2_FILES}
        cmd: |
          if grep -q -x  "sops:" "{{.ITEM}}"; then
              sops --decrypt --in-place --input-type yaml --output-type yaml "{{.ITEM}}"
          fi
    vars:
      SECRET_FILES:
        sh: find "{{.ROOT_DIR}}" -type f -name "*.sops.yaml"
      SECRET_J2_FILES:
        sh: find "{{.ROOT_DIR}}" -type f -name "*.sops.*.j2"
    preconditions:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - which sops
