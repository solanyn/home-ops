version: "3"
vars:
  TALHELPER_CLUSTER_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig"
  TALHELPER_SECRET_FILE: "{{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml"
  TALHELPER_ENV_FILE: "{{.KUBERNETES_DIR}}/bootstrap/talos/talenv.sops.yaml"
  HELMFILE_FILE: "{{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml"
  TALOSCONFIG_FILE: "{{.TALHELPER_CLUSTER_DIR}}/talosconfig"
  CLUSTER_SECRET_SOPS_FILE: "{{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml"
  CLUSTER_SETTINGS_FILE: "{{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml"
  GITHUB_DEPLOY_KEY_FILE: "{{.KUBERNETES_DIR}}/bootstrap/flux/github-deploy-key.sops.yaml"
  BOOTSTRAP_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/bootstrap/resources'
  NS: "default"
env:
  TALOSCONFIG: "{{.TALOSCONFIG_FILE}}"
tasks:
  kubernetes:
    desc: Bootstrap the Talos cluster
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    vars: &vars
      CLUSTER: '{{.CLUSTER}}'
      NODES: '{{.NODES}}'
      DISK: '{{.DISK}}'
    requires:
      vars: ['CLUSTER', 'NODES', 'DISK']
    cmds:
      - task: talos
      - task: kubeconfig
      - task: helm
      - {task: helm, vars: *vars}
      - task: flux
      - talosctl health --server=false
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}
  talos:
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - |
        if [ ! -f "{{.TALHELPER_SECRET_FILE}}" ]; then
            talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
            sops --encrypt --in-place {{.TALHELPER_SECRET_FILE}}
        fi
      - |
        talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
      - talhelper gencommand apply --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--insecure" | bash
      - until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}
  kubeconfig:
    desc: Fetch kubeconfig
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmd: until talhelper gencommand kubeconfig --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="{{.ROOT_DIR}} --force" | bash; do sleep 10; done
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
  helm:
    desc: Bootstrap core apps needed for Talos
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kubeconfig {{.KUBECONFIG_FILE}} --file {{.HELMFILE_FILE}} apply --skip-diff-on-install --suppress-diff
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing helmfile
        sh: test -f {{.HELMFILE_FILE}}
  rook:
    vars: &vars
      CLUSTER: '{{.CLUSTER}}'
      NODE: '{{.ITEM}}'
      DISK: '{{.DISK}}'
    cmds:
      - for: {var: NODES}
        task: rook-data
        vars: *vars
      - for: {var: NODES}
        task: rook-disk
        vars: *vars
  rook-disk:
    internal: true
    cmds:
      - $GOPATH/bin/envsubst < <(cat {{.BOOTSTRAP_RESOURCES_DIR}}/rook-disk-job.tmpl.yaml) | kubectl apply -f -
      - bash {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}}
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      JOB: wipe-disk-{{.NODE}}
      NS: '{{.NS | default "default"}}'
    env:
      DISK: '{{.DISK}}'
      JOB: '{{.JOB}}'
      NODE: '{{.NODE}}'
      NS: '{{.NS}}'
    preconditions:
      - test -f $GOPATH/bin/envsubst
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/rook-disk-job.tmpl.yaml
  rook-data:
    internal: true
    cmds:
      - $GOPATH/bin/envsubst < <(cat {{.BOOTSTRAP_RESOURCES_DIR}}/rook-data-job.tmpl.yaml) | kubectl apply -f -
      - bash {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}}
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      JOB: wipe-data-{{.NODE}}
      NS: '{{.NS | default "default"}}'
    env:
      DISK: '{{.DISK}}'
      JOB: '{{.JOB}}'
      NODE: '{{.NODE}}'
      NS: '{{.NS}}'
    preconditions:
      - test -f $GOPATH/bin/envsubst
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/rook-data-job.tmpl.yaml
  flux:
    desc: Bootstrap Flux into a Kubernetes cluster
    cmds:
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap/flux
      - |
        if ! kubectl --kubeconfig {{.KUBECONFIG_FILE}} -n flux-system get secret sops-age >/dev/null 2>&1; then
          cat {{.AGE_FILE}} | kubectl --kubeconfig {{.KUBECONFIG_FILE}} -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin
        else
          echo "sops-age secret already exists, skipping creation."
        fi
      - sops --decrypt {{.GITHUB_DEPLOY_KEY_FILE}} | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
      - sops --decrypt {{.CLUSTER_SECRET_SOPS_FILE}} | kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename -
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename {{.CLUSTER_SETTINGS_FILE}}
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}
