# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: rreading-glasses
spec:
  chartRef:
    kind: OCIRepository
    name: rreading-glasses
  interval: 1h
  values:
    controllers:
      rreading-glasses:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17
            envFrom: &envFrom
              - secretRef:
                  name: "{{ .Release.Name }}-secret"
        containers:
          app:
            image:
              repository: blampe/rreading-glasses
              tag: latest
            command: ["/main", "serve"]
            args:
              - --upstream=www.goodreads.com
              - --cookie=$(GOODREADS_COOKIE)
              - --postgres-host=$(INIT_POSTGRES_HOST)
              - --postgres-user=$(INIT_POSTGRES_USER)
              - --postgres-password=$(INIT_POSTGRES_PASS)
              - --postgres-database=$(INIT_POSTGRES_DBNAME)
              - --verbose
              - --port=80
            envFrom: *envFrom
            probes:
              # TODO: application is very alpha, enable when a real health route is exposed
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &port 80
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        ports:
          http:
            port: *port
